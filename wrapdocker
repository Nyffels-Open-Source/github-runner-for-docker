#!/bin/bash

# Ensure that all nodes in /dev/mapper correspond to mapped devices currently loaded by the device-mapper kernel driver
dmsetup mknodes

# First, make sure that cgroups are mounted correctly.
CGROUP=/sys/fs/cgroup
: {LOG:=stdio}

[ -d $CGROUP ] || mkdir $CGROUP

mountpoint -q $CGROUP || mount -n -t tmpfs -o uid=0,gid=0,mode=0755 cgroup $CGROUP || {
  echo "Could not make a tmpfs mount. Did you use --privileged?"
  exit 1
}

if [ -d /sys/kernel/security ] && ! mountpoint -q /sys/kernel/security; then
  mount -t securityfs securityfs /sys/kernel/security
fi

# Start Docker daemon if needed (for DinD)
if ! pgrep dockerd > /dev/null; then
  echo "üîß Starting Docker daemon..."
  dockerd > /var/log/dockerd.log 2>&1 &
  sleep 5
fi

# Add docker label injection wrapper
mkdir -p /opt/runner/bin
cat << 'EOF' > /opt/runner/bin/docker
#!/bin/bash
RUNNER_LABEL_KEY="runner-owner"
RUNNER_LABEL_VALUE="${NAME:-$(hostname)}"
FORCED_LABEL="--label=${RUNNER_LABEL_KEY}-${RUNNER_LABEL_VALUE}"

if [[ "$1" == "run" ]]; then
  for arg in "$@"; do
    if [[ "$arg" == --label=${RUNNER_LABEL_KEY}-* ]]; then
      exec /usr/bin/docker "$@"
    fi
  done
  echo "üê≥ docker run detected ‚Äì injecting label: ${FORCED_LABEL}"
  exec /usr/bin/docker "$@" "${FORCED_LABEL}"
elif [[ "$1" == "build" ]]; then
  for arg in "$@"; do
    if [[ "$arg" == --label=${RUNNER_LABEL_KEY}-* ]]; then
      exec /usr/bin/docker "$@"
    fi
  done
  echo "üê≥ docker build detected ‚Äì injecting label: ${FORCED_LABEL}"
  exec /usr/bin/docker "$@" "${FORCED_LABEL}"
else
  exec /usr/bin/docker "$@"
fi
EOF

chmod +x /opt/runner/bin/docker
export PATH="/opt/runner/bin:$PATH"

chmod +x /opt/runner/bin/docker
export PATH="/opt/runner/bin:$PATH"